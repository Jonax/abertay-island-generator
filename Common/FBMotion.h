//////////////////////////////////////////////////////////////////////////////////////////
//						  Dynamic Terrain Generation Prototype							//
//					  Written 2007 by Jon Wills (jc@chromaticaura.net)						//
//				Written for a Win32 environment using the DirectSound API.				//
//																						//
//				   Written at the University of Abertay Dundee, Scotland				//
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
//	FRACTIONAL BROWNIAN MOTION CLASS CODE												//
//	Used to process Perlin Noise to generate random heights for a terrain.				//
//////////////////////////////////////////////////////////////////////////////////////////

#ifndef _FBMOTION_H_
#define _FBMOTION_H_

//////////////////////////////////////////////////////////////////////////////////////////
//	EXTRA INCLUDE FILES
//////////////////////////////////////////////////////////////////////////////////////////
#include <windows.h>	// Win32 library.  
#include "Perlin.h"		// Perlin Noise Class

//////////////////////////////////////////////////////////////////////////////////////////
//	CLASS DECLARATIONS
//	Declarations of the class and its members.  
//////////////////////////////////////////////////////////////////////////////////////////
class FBMotion
{
	public:
		// Constructor to set up the FBM generator.  
		FBMotion(int octaves, float freq, float amp, int range);

		// Gets a sample value based on a set of 2D coordinates.  
		float Get(float x, float y);

		// Functions to set the various stats of the generator.  
		void SetOctaves(float octaves);			// Sets number of octaves.  
		void SetFrequency(float frequency);		// Sets frequency.  
		void SetAmplitude(float amplitude);		// Sets Amplitude.  
		void RandomSeed(int range);				// Sets a random seed based on a set range.  

	private:
		// Main processing of 2D Perlin Noise.  
		float PerlinNoise2D(float vec[2]);

	//////////////////////////////////////////////////////////////////////////////////////
	//	CLASS OBJECTS
	//////////////////////////////////////////////////////////////////////////////////////
		Perlin	*PerlinGen;				// Perlin Noise Generator.  

	//////////////////////////////////////////////////////////////////////////////////////
	//	CLASS OBJECTS
	//////////////////////////////////////////////////////////////////////////////////////
		int		mOctaves;		// Number of octaves.  
		float	mFrequency;		// Frequency.  
		float	mAmplitude;		// Amplitude of the results.  
};

#endif